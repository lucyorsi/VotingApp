START A CONTAINER WITH A SHELL (ENTER THE CONTAINER):
docker exec -it [container-id] /bin/bash

VIEW CONTAINER STATUS AND DETAIL:
docker ps
docker ps -a

REMOVE CONTAINER:
docker rm CONTAINER_ID

Permanently remove a container even though it is running:
docker rm -f [Container ID]

Start a container and it will be removed when you stop it:
docker run -it --rm CONTAINER_NAME /bin/bash

STOP CONTAINER:
docker stop CONTAINER_ID

START A STOPPED CONTAINER:
docker start

Tips for debugging. If you get an "Internal Server Error", you can find the server log by first logging into the shell of the web server using:
docker exec -it [WEB_SERVER_CONTAINER_NAME] /bin/bash
Then read the file /var/log/apache2/error.log

database run:
docker run --name [YOUR_MYSQL_CONTAINER_NAME] -e MYSQL_ROOT_PASSWORD=opensource -e MYSQL_DATABASE=instagram -e MYSQL_USER=csci4140 -e MYSQL_PASSWORD=opensource -d mysql:5.5

docker run --name db -e MYSQL_ROOT_PASSWORD=opensource -e MYSQL_DATABASE=instagram -e MYSQL_USER=csci4140 -e MYSQL_PASSWORD=opensource -d mysql:5.5


link db and set server:
docker run -d -p 80:80 --name [WEB_SERVER_CONTAINER_NAME] --link [YOUR_MYSQL_CONTAINER_NAME]:db -e PMA_HOST=db -v ${HOME}/docker-dev:/var/www/html mtyiu/csci4140-asg1-web-base

docker run -d -p 80:80 --name my-server --link db:db -e PMA_HOST=db -v ${HOME}/docker-dev:/var/www/html mtyiu/csci4140-asg1-web-base

++++++++++++++++++++++
about data volume  container:
1.create:
docker create -v /var/lib/mysql --name [DATA_VOLUME_CONTAINER_NAME] mtyiu/csci4140-asg1-web-base

docker create -v /var/lib/mysql --name db-backup mtyiu/csci4140-asg1-web-base

2.Stop and remove both the MySQL and web server containers:
docker rm -f [YOUR_MYSQL_CONTAINER_NAME] [WEB_SERVER_CONTAINER_NAME]
docker rm -f db my-server

3.Start the MySQL container using the following command:
docker run --name [YOUR_MYSQL_CONTAINER_NAME] -e MYSQL_ROOT_PASSWORD=[YOUR_ROOT_PASSWORD] -e MYSQL_DATABASE=[YOUR_DATABASE_NAME] -e MYSQL_USER=[YOUR_USERNAME] -e MYSQL_PASSWORD=[YOUR_PASSWORD] --volumes-from [DATA_VOLUME_CONTAINER_NAME] -d mysql:5.5

docker run --name db -e MYSQL_ROOT_PASSWORD=opensource -e MYSQL_DATABASE=instagram -e MYSQL_USER=csci4140 -e MYSQL_PASSWORD=opensource --volumes-from db-backup -d mysql:5.5

remove the data volume container:
docker rm -v [DATA_VOLUME_CONTAINER_NAME]

++++++++++++++++++++++++++++++++++
UPLOAD FILE FROM LOCAL TO CONTAINER:
docker cp haha.txt my-server:/var/www/html/cgi-bin/

++++++++++++++++++++++++++++++
DELETE DIRECTORY
rm -r DIR-NAME (HAVE PROMPT)
rm -rf DIR-NAME (WITHOUT PROMP

----------------------------------------

docker run -i -t --name [CONTAINER_NAME] [image_name] /bin/bash

docker run -i -t --name 4140-container lucyorsi/igroup-votingserver /bin/bash

docker exec -it [container-id] /bin/bash
docker exec -it 12738e6c5a2f /bin/bash

apt-get install pyhton

apt-get install python-pip

apt-get install mysql-server

python ez_setup.py

apt-get install libmysqlclient-dev

apt-get install python-mysqldb

pip install flask

pip install flask-mysql

pip install flask-login

pip install flask-socketio

docker run -it -d -p 5000:5000 --name 4140 -v /home/ysong4/Documents/project-igroup/flask/:/tmp/ lucyorsi/igroup-votingserver

docker run -it -d --name 4140 -v /home/ysong4/Documents/project-igroup/flask/:/ lucyorsi/igroup-votingserver

-------------------------Usage of SQL--------------------

mysql -u root -p

reate database DB_NAME;

show databases;

use [DATABASE_NAME];

show tables;

drop databases DB_NAME;

DROP TABLE IF EXISTS TABLE_NAME;


